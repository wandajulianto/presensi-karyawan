# Multi-stage build untuk production
FROM node:18-alpine AS node-builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build

# PHP Production Build
FROM php:8.2-fpm-alpine AS php-base

# Install system dependencies
RUN apk add --no-cache \
    build-base \
    libpng-dev \
    libjpeg-turbo-dev \
    libwebp-dev \
    freetype-dev \
    oniguruma-dev \
    libxml2-dev \
    zip \
    unzip \
    curl \
    git \
    libzip-dev \
    bash \
    mysql-client \
    nginx \
    supervisor \
    && rm -rf /var/cache/apk/*

# Configure and install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
    && docker-php-ext-install \
        pdo \
        pdo_mysql \
        mbstring \
        exif \
        pcntl \
        bcmath \
        gd \
        zip \
        opcache

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Ensure www-data user exists
RUN addgroup -g 1000 www-data 2>/dev/null || true && \
    adduser -u 1000 -G www-data -s /bin/sh -D www-data 2>/dev/null || true

# Set working directory
WORKDIR /var/www/html

# Copy PHP configuration optimized for production
COPY php.production.ini /usr/local/etc/php/php.ini

# Copy composer files first for better Docker layer caching
COPY composer.json composer.lock ./

# Install PHP dependencies for production
RUN composer install --no-dev --optimize-autoloader --no-scripts --no-interaction --prefer-dist

# Copy application files
COPY . .
COPY --from=node-builder /app/public/build ./public/build

# Generate optimized autoloader
RUN composer dump-autoload --optimize --classmap-authoritative

# Create necessary directories and set permissions
RUN mkdir -p storage/logs storage/framework/{cache,sessions,views} bootstrap/cache \
    && chown -R www-data:www-data /var/www/html \
    && chmod -R 775 storage bootstrap/cache

# Copy production nginx configuration
COPY nginx.production.conf /etc/nginx/nginx.conf

# Copy supervisor configuration
COPY supervisord.production.conf /etc/supervisor/conf.d/supervisord.conf

# Create startup script
COPY start.production.sh /start.sh
RUN chmod +x /start.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Use supervisor to run multiple processes
CMD ["/start.sh"] 